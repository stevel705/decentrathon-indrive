#!/usr/bin/env python3
"""
Training script for YOLO damage detection model
Trains YOLOv8 model to detect car damages like dents, scratches, broken parts, etc.
"""

import os
import yaml
import argparse
from pathlib import Path
from ultralytics import YOLO
import torch
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

# –ö–ª–∞—Å—Å—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
DAMAGE_CLASSES = {
    0: "damaged_door",
    1: "damaged_window", 
    2: "damaged_headlight",
    3: "damaged_mirror",
    4: "dent",
    5: "damaged_hood",
    6: "damaged_bumper",
    7: "damaged_windshield"
}

def create_dataset_config(data_dir: str, output_path: str = "config.yaml"):
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –¥–∞—Ç–∞—Å–µ—Ç–∞ YOLO"""
    
    config = {
        'path': str(Path(data_dir).absolute()),  # –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞
        'train': 'images/train',  # –ü—É—Ç—å –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        'val': 'images/val',      # –ü—É—Ç—å –∫ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        'test': 'images/test',    # –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤
        'nc': len(DAMAGE_CLASSES),
        
        # –ù–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤
        'names': list(DAMAGE_CLASSES.values())
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open(output_path, 'w') as f:
        yaml.dump(config, f, default_flow_style=False)
    
    print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {output_path}")
    return output_path

def check_dataset_structure(data_dir: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞—Ç–∞—Å–µ—Ç–∞"""
    data_path = Path(data_dir)
    
    required_dirs = [
        'images/train',
        'images/val', 
        'labels/train',
        'labels/val'
    ]
    
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞—Ç–∞—Å–µ—Ç–∞:")
    all_exist = True
    
    for dir_name in required_dirs:
        dir_path = data_path / dir_name
        exists = dir_path.exists()
        
        if exists:
            file_count = len(list(dir_path.glob('*')))
            print(f"‚úÖ {dir_name}: {file_count} —Ñ–∞–π–ª–æ–≤")
        else:
            print(f"‚ùå {dir_name}: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            all_exist = False
    
    if not all_exist:
        print("\n‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞. –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:")
        print("""
data/
‚îú‚îÄ‚îÄ images/
‚îÇ   ‚îú‚îÄ‚îÄ train/     # –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (.jpg, .png)
‚îÇ   ‚îî‚îÄ‚îÄ val/       # –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 
‚îî‚îÄ‚îÄ labels/
    ‚îú‚îÄ‚îÄ train/     # –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ (.txt)
    ‚îî‚îÄ‚îÄ val/       # –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
        """)
        return False
    
    return True

def train_yolo_model(
    data_config: str,
    model_size: str = 'yolov8n.pt',
    epochs: int = 100,
    imgsz: int = 640,
    batch_size: int = 16,
    lr0: float = 0.01,
    weight_decay: float = 0.0005,
    mosaic: float = 1.0,
    mixup: float = 0.0,
    copy_paste: float = 0.0,
    device: str = 'auto',
    workers: int = 8,
    project: str = 'runs/detect',
    name: str = 'damage_detection',
    resume: bool = False,
    save_period: int = 10
):
    """
    –¢—Ä–µ–Ω–∏—Ä—É–µ—Ç YOLO –º–æ–¥–µ–ª—å –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
    
    Args:
        data_config: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞
        model_size: –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏ (yolov8n, yolov8s, yolov8m, yolov8l, yolov8x)
        epochs: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö
        imgsz: –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        batch_size: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
        lr0: –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è
        weight_decay: –í–µ—Å–æ–≤–∞—è —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è
        mosaic: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –º–æ–∑–∞–∏—á–Ω–æ–π –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        mixup: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å mixup –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        copy_paste: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å copy-paste –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        device: –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ('auto', 'cpu', '0', '0,1', etc.)
        workers: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ worker –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        project: –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        name: –ò–º—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
        resume: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–µ–∫–ø–æ–∏–Ω—Ç–∞
        save_period: –ü–µ—Ä–∏–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    """
    
    print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É YOLO –º–æ–¥–µ–ª–∏")
    print(f"–ú–æ–¥–µ–ª—å: {model_size}")
    print(f"–î–∞—Ç–∞—Å–µ—Ç: {data_config}")
    print(f"–≠–ø–æ—Ö–∏: {epochs}")
    print(f"–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {imgsz}")
    print(f"–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}")
    print(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    model = YOLO(model_size)
    
    # –¢—Ä–µ–Ω–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
    results = model.train(
        data=data_config,
        epochs=epochs,
        imgsz=imgsz,
        batch=batch_size,
        lr0=lr0,
        weight_decay=weight_decay,
        mosaic=mosaic,
        mixup=mixup,
        copy_paste=copy_paste,
        device=device,
        workers=workers,
        project=project,
        name=name,
        resume=resume,
        save_period=save_period,
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        patience=20,          # –†–∞–Ω–Ω—è—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
        optimizer='AdamW',    # –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
        close_mosaic=10,      # –û—Ç–∫–ª—é—á–∏—Ç—å –º–æ–∑–∞–∏–∫—É –∑–∞ 10 —ç–ø–æ—Ö –¥–æ –∫–æ–Ω—Ü–∞
        amp=True,             # Automatic Mixed Precision
        plots=True,           # –°–æ—Ö—Ä–∞–Ω—è—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏
        val=True,             # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        
        # –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        degrees=10.0,         # –ü–æ–≤–æ—Ä–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        translate=0.1,        # –°–¥–≤–∏–≥
        scale=0.5,            # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        shear=0.0,            # –°–¥–≤–∏–≥
        perspective=0.0,      # –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞
        flipud=0.0,           # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ñ–ª–∏–ø
        fliplr=0.5,           # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ñ–ª–∏–ø
        hsv_h=0.015,          # –°–¥–≤–∏–≥ –æ—Ç—Ç–µ–Ω–∫–∞
        hsv_s=0.7,            # –ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å
        hsv_v=0.4,            # –Ø—Ä–∫–æ—Å—Ç—å
    )
    
    print("‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    return results

def evaluate_model(model_path: str, data_config: str, imgsz: int = 640):
    """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    
    print(f"üìä –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏: {model_path}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    model = YOLO(model_path)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    metrics = model.val(data=data_config, imgsz=imgsz, plots=True)
    
    # –í—ã–≤–æ–¥–∏–º –º–µ—Ç—Ä–∏–∫–∏
    print(f"\nüìà –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏:")
    print(f"mAP@0.5: {metrics.box.map50:.4f}")
    print(f"mAP@0.5:0.95: {metrics.box.map:.4f}")
    print(f"Precision: {metrics.box.mp:.4f}")
    print(f"Recall: {metrics.box.mr:.4f}")
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º
    print(f"\nüìã –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º:")
    for i, class_name in DAMAGE_CLASSES.items():
        if i < len(metrics.box.ap_class_index):
            ap = metrics.box.ap[i, 0]  # AP@0.5
            print(f"{class_name}: AP@0.5 = {ap:.4f}")
    
    return metrics

def create_training_script():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    
    script_content = '''#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä —Å–∫—Ä–∏–ø—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ YOLO –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
"""

from yolo_train import create_dataset_config, check_dataset_structure, train_yolo_model, evaluate_model

def main():
    # –ü—É—Ç—å –∫ –¥–∞—Ç–∞—Å–µ—Ç—É
    data_dir = "data"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É –¥–∞—Ç–∞—Å–µ—Ç—É
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞—Ç–∞—Å–µ—Ç–∞
    if not check_dataset_structure(data_dir):
        print("‚ùå –ò—Å–ø—Ä–∞–≤—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞—Ç–∞—Å–µ—Ç–∞ –ø–µ—Ä–µ–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π")
        return
    
    # 2. –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–∞—Ç–∞—Å–µ—Ç–∞
    config_path = create_dataset_config(data_dir, "damage_dataset.yaml")
    
    # 3. –¢—Ä–µ–Ω–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
    results = train_yolo_model(
        data_config=config_path,
        model_size='yolov8n.pt',  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ 's', 'm', 'l', 'x'
        epochs=100,
        imgsz=640,
        batch_size=16,
        lr0=0.01,
        device='auto',  # 'cpu' –∏–ª–∏ '0' –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ GPU
        project='runs/damage_detection',
        name='experiment_1'
    )
    
    # 4. –û—Ü–µ–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    best_model = results.save_dir / 'weights' / 'best.pt'
    evaluate_model(str(best_model), config_path)

if __name__ == "__main__":
    main()
'''
    
    with open("train_damage_detection.py", "w", encoding="utf-8") as f:
        f.write(script_content)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä —Å–∫—Ä–∏–ø—Ç–∞: train_damage_detection.py")

def convert_to_onnx(model_path: str, output_path: str = None):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å –≤ ONNX —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –¥–µ–ø–ª–æ—è"""
    
    if output_path is None:
        output_path = model_path.replace('.pt', '.onnx')
    
    print(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –≤ ONNX: {model_path} -> {output_path}")
    
    model = YOLO(model_path)
    model.export(format='onnx', imgsz=640)
    
    print(f"‚úÖ –ú–æ–¥–µ–ª—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: {output_path}")

def main():
    parser = argparse.ArgumentParser(description='YOLO Damage Detection Training')
    parser.add_argument('--data', type=str, required=True, help='–ü—É—Ç—å –∫ –¥–∞—Ç–∞—Å–µ—Ç—É')
    parser.add_argument('--config', type=str, help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (—Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)')
    parser.add_argument('--model', type=str, default='yolov8n.pt', 
                       choices=['yolov8n.pt', 'yolov8s.pt', 'yolov8m.pt', 'yolov8l.pt', 'yolov8x.pt'],
                       help='–†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏')
    parser.add_argument('--epochs', type=int, default=100, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö')
    parser.add_argument('--batch', type=int, default=16, help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞')
    parser.add_argument('--imgsz', type=int, default=640, help='–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
    parser.add_argument('--lr', type=float, default=0.01, help='–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è')
    parser.add_argument('--device', type=str, default='auto', help='–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (auto, cpu, 0, 1, ...)')
    parser.add_argument('--project', type=str, default='runs/damage_detection', help='–ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞')
    parser.add_argument('--name', type=str, default=None, help='–ò–º—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞')
    parser.add_argument('--resume', action='store_true', help='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É')
    parser.add_argument('--eval-only', type=str, help='–¢–æ–ª—å–∫–æ –æ—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏ (–ø—É—Ç—å –∫ .pt —Ñ–∞–π–ª—É)')
    parser.add_argument('--export-onnx', type=str, help='–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å –≤ ONNX (–ø—É—Ç—å –∫ .pt —Ñ–∞–π–ª—É)')
    parser.add_argument('--create-example', action='store_true', help='–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä —Å–∫—Ä–∏–ø—Ç–∞')
    
    args = parser.parse_args()
    
    if args.create_example:
        create_training_script()
        return
    
    if args.export_onnx:
        convert_to_onnx(args.export_onnx)
        return
    
    if args.eval_only:
        config_path = args.config or create_dataset_config(args.data)
        evaluate_model(args.eval_only, config_path)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞—Ç–∞—Å–µ—Ç–∞
    if not check_dataset_structure(args.data):
        print("‚ùå –ò—Å–ø—Ä–∞–≤—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞—Ç–∞—Å–µ—Ç–∞ –ø–µ—Ä–µ–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–∞—Ç–∞—Å–µ—Ç–∞
    config_path = args.config or create_dataset_config(args.data, "damage_dataset.yaml")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
    if args.name is None:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        args.name = f"damage_detection_{timestamp}"
    
    # –¢—Ä–µ–Ω–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
    results = train_yolo_model(
        data_config=config_path,
        model_size=args.model,
        epochs=args.epochs,
        imgsz=args.imgsz,
        batch_size=args.batch,
        lr0=args.lr,
        device=args.device,
        project=args.project,
        name=args.name,
        resume=args.resume
    )
    
    # –û—Ü–µ–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    best_model = results.save_dir / 'weights' / 'best.pt'
    evaluate_model(str(best_model), config_path)
    
    print(f"\nüéâ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {best_model}")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results.save_dir}")

if __name__ == "__main__":
    main()
